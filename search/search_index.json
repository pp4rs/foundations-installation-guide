{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation Guide These pages should help you to get started setting up the computing environment on your machine ready for the course \"Programming Practices for Research in Economics: Foundations\" at the University of Zurich in Winter 2019. Please attempt to install necessary software and packages prior to the beginning of the course. Summary If everything goes smoothly, you should be able to complete the installation in one sitting within 60 minutes. Please follow the steps one-by-one in the order they appear on the side bar and do not deviate from them, unless you really know what you are doing. If you find any outdated links or unclear descriptions, email us at pp4rs.contact@gmail.com so that we can update the instructions or clarify as needed. Where necessary, we have provided instructions for Mac, Windows and Linux machines.","title":"Getting Started"},{"location":"#installation-guide","text":"These pages should help you to get started setting up the computing environment on your machine ready for the course \"Programming Practices for Research in Economics: Foundations\" at the University of Zurich in Winter 2019. Please attempt to install necessary software and packages prior to the beginning of the course. Summary If everything goes smoothly, you should be able to complete the installation in one sitting within 60 minutes. Please follow the steps one-by-one in the order they appear on the side bar and do not deviate from them, unless you really know what you are doing. If you find any outdated links or unclear descriptions, email us at pp4rs.contact@gmail.com so that we can update the instructions or clarify as needed. Where necessary, we have provided instructions for Mac, Windows and Linux machines.","title":"Installation Guide"},{"location":"acknowledgement/","text":"Acknowledgements This module is based on the 2017 version a larger Programming Practices course: Programming Practices For Economists , by Lachlan Deer, Adrian Etter, Julian Langer & Max Winkler It is designed after and borrows a lot from: Effective Programming Practices for Economists , a course by Hans-Martin von Gaudecker License Material is licensed under a CC-BY-NC-SA license. Further information is available at our course homepage Suggested Citation: Lachlan Deer & Julian Langer, 2019, Installation Guide , Programming Practices for Research in Economics: Foundations, University of Zurich","title":"Acknowledgements"},{"location":"acknowledgement/#acknowledgements","text":"This module is based on the 2017 version a larger Programming Practices course: Programming Practices For Economists , by Lachlan Deer, Adrian Etter, Julian Langer & Max Winkler It is designed after and borrows a lot from: Effective Programming Practices for Economists , a course by Hans-Martin von Gaudecker","title":"Acknowledgements"},{"location":"acknowledgement/#license","text":"Material is licensed under a CC-BY-NC-SA license. Further information is available at our course homepage Suggested Citation: Lachlan Deer & Julian Langer, 2019, Installation Guide , Programming Practices for Research in Economics: Foundations, University of Zurich","title":"License"},{"location":"commandLine/","text":"Command Line Tools A command-line interface or command language interpreter (CLI), also known as a terminal, is a means of interacting with a computer program where the user issues commands to the program in the form of successive lines of text (command lines). Throughout the course we will emphasize use of the terminal and executing commands within it as our modus operandi. Windows Users So that we can work as closely as possible to the Mac and Linux users we will install Cygwin . Download Cygwin here and use the graphical installer. Accept all the default options. Choose any server from which to download cygwin and packages when prompted. Verify your installation by opening Cygwin. When it opens you should see a black box with some text that looks like: userName@computerName: ~$ i.e. for Lachlan he sees: lachlan@lachlan-ThinkPad: ~$ We will explain what all this means in the first day or so of the course. Why Cygwin We will uses Cygwin as our command line tool, and unlike other Windows shells such as PowerShell it uses Unix syntax. Anywhere throughout the remainder of the installation guide where we suggest you to enter a command into a terminal, enter the text-based command into your Cygwin terminal followed by pressing Return , for example: userName@computerName: ~$ whoami Should return your username. Do Not Delete the Install File Do not delete the setup-x86_64.exe file. It needs to be kept so that we can add on some additional packages to use in the course. Mac Users A command line interface comes already installed with OSX. You will need to install some other software from the terminal thoughout the course, so it will be useful to install some additional \"command line tools\" now: First we want to install X-code command line tools. Open a terminal by searching for it with spotlight, cmd + spacebar then type terminal and press Return when it appears. Then, copy and paste the following xcode-select --install If you get an answer that the command line tools are already installed, you can just continue to the next step. Second, install Homebrew by opening a terminal and pasting the following command: ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" To verify that Homebrew installed correctly, enter the following into your terminal brew doctor And you should see the following output Your system is ready to brew Now we can use homebrew to easily install software. We want to make sure you have some basic system tools that some packages require. Let's (re)install them real quick. First libxml2 : brew reinstall libxml2 If you system tells you that it is not yet installed, then try brew install libxml2 instead. We also want to link this so that terminal finds it later: echo 'export PATH=\"/usr/local/opt/libxml2/bin:$PATH\"' >> ~/.bash_profile Second, we also need openssl : brew reinstall openssl Again, if it is already installed, then use brew install openssl instead. Again, we need it to link to terminal: echo 'export PATH=\"/usr/local/opt/openssl/bin:$PATH\"' >> ~/.bash_profile Finally, we need libgit2 : brew install libgit2 If terminal tells you it is not yet installed, then go for brew reinstall libgit2 Linux Users Linux comes with a command line interface already installed. We need to install some additional system tools. For this open a terminal session with Crtl + Alt + T . Now copy the following command into terminal and press Enter : sudo apt-get install libcurl4-gnutls-dev librtmp-dev After the installation succeeded successfully repeat this one-by-one with the following two other commands: sudo apt-get install libxml2-dev sudo apt-get install libssl-dev","title":"Command Line Tools"},{"location":"commandLine/#command-line-tools","text":"A command-line interface or command language interpreter (CLI), also known as a terminal, is a means of interacting with a computer program where the user issues commands to the program in the form of successive lines of text (command lines). Throughout the course we will emphasize use of the terminal and executing commands within it as our modus operandi.","title":"Command Line Tools"},{"location":"commandLine/#windows-users","text":"So that we can work as closely as possible to the Mac and Linux users we will install Cygwin . Download Cygwin here and use the graphical installer. Accept all the default options. Choose any server from which to download cygwin and packages when prompted. Verify your installation by opening Cygwin. When it opens you should see a black box with some text that looks like: userName@computerName: ~$ i.e. for Lachlan he sees: lachlan@lachlan-ThinkPad: ~$ We will explain what all this means in the first day or so of the course. Why Cygwin We will uses Cygwin as our command line tool, and unlike other Windows shells such as PowerShell it uses Unix syntax. Anywhere throughout the remainder of the installation guide where we suggest you to enter a command into a terminal, enter the text-based command into your Cygwin terminal followed by pressing Return , for example: userName@computerName: ~$ whoami Should return your username. Do Not Delete the Install File Do not delete the setup-x86_64.exe file. It needs to be kept so that we can add on some additional packages to use in the course.","title":"Windows Users"},{"location":"commandLine/#mac-users","text":"A command line interface comes already installed with OSX. You will need to install some other software from the terminal thoughout the course, so it will be useful to install some additional \"command line tools\" now: First we want to install X-code command line tools. Open a terminal by searching for it with spotlight, cmd + spacebar then type terminal and press Return when it appears. Then, copy and paste the following xcode-select --install If you get an answer that the command line tools are already installed, you can just continue to the next step. Second, install Homebrew by opening a terminal and pasting the following command: ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" To verify that Homebrew installed correctly, enter the following into your terminal brew doctor And you should see the following output Your system is ready to brew Now we can use homebrew to easily install software. We want to make sure you have some basic system tools that some packages require. Let's (re)install them real quick. First libxml2 : brew reinstall libxml2 If you system tells you that it is not yet installed, then try brew install libxml2 instead. We also want to link this so that terminal finds it later: echo 'export PATH=\"/usr/local/opt/libxml2/bin:$PATH\"' >> ~/.bash_profile Second, we also need openssl : brew reinstall openssl Again, if it is already installed, then use brew install openssl instead. Again, we need it to link to terminal: echo 'export PATH=\"/usr/local/opt/openssl/bin:$PATH\"' >> ~/.bash_profile Finally, we need libgit2 : brew install libgit2 If terminal tells you it is not yet installed, then go for brew reinstall libgit2","title":"Mac Users"},{"location":"commandLine/#linux-users","text":"Linux comes with a command line interface already installed. We need to install some additional system tools. For this open a terminal session with Crtl + Alt + T . Now copy the following command into terminal and press Enter : sudo apt-get install libcurl4-gnutls-dev librtmp-dev After the installation succeeded successfully repeat this one-by-one with the following two other commands: sudo apt-get install libxml2-dev sudo apt-get install libssl-dev","title":"Linux Users"},{"location":"contact/","text":"Contact Us Programming Practices Team Programming Practices for Research in Economics was created by Lachlan Deer Adrian Etter Julian Langer Max Winkler at the Department of Economics, University of Zurich in 2016. This installation guide is for the 2018 edition, conducted by Ulrich Bergmann Ursina Schaede Dora Simon Carlo Zanella Christian Z\u00fcnd Questions or Comments? Please contact us via email: programming \"AT\" econ.uzh.ch with the title \"Installation Guide: Programming Practices for Research in Economics.\" We look forward to hearing from you if you have questions about the installation guide, found this installation guide useful, or have further comments or suggestions to improve it.","title":"Contact"},{"location":"contact/#contact-us","text":"","title":"Contact Us"},{"location":"contact/#programming-practices-team","text":"Programming Practices for Research in Economics was created by Lachlan Deer Adrian Etter Julian Langer Max Winkler at the Department of Economics, University of Zurich in 2016. This installation guide is for the 2018 edition, conducted by Ulrich Bergmann Ursina Schaede Dora Simon Carlo Zanella Christian Z\u00fcnd","title":"Programming Practices Team"},{"location":"contact/#questions-or-comments","text":"Please contact us via email: programming \"AT\" econ.uzh.ch with the title \"Installation Guide: Programming Practices for Research in Economics.\" We look forward to hearing from you if you have questions about the installation guide, found this installation guide useful, or have further comments or suggestions to improve it.","title":"Questions or Comments?"},{"location":"gitInstall/","text":"Installing Git and Setting Up Accounts Git is a Version Control System (VCS) that has gained a lot of traction among the programming community. We will want to use version control to keep track of the files we write, and the changes we make to them. Account Creation During the course we will show you how to use GitHub to host some of your work and do code related project management. You will need to set up an account: Please register for a GitHub account Mac Users On MacOS, download and install Git from here . If your system says it can't be opened, because it is from an unidentified developer, then open it via right-lick and open . Also install the command-line auto-completion script. For this go to this website . You should now see a the text file starting with # bash/zsh completion support for core Git. # # Copyright (C) 2006,2007 Shawn O. Pearce <spearce@spearce.org> # Conceptually based on gitcompletion (http://gitweb.hawaga.org.uk/). # Distributed under the GNU General Public License, version 2.0. save this file as git-completion.bash to your user folder by pressing CMD+s . If you want to know where your user folder is, open a terminal and type pwd . For Uli it is for example under /Users/ubergmann . If you use Safari, make sure to save the file as Page Source and don't append a .txt to its filename (Chrome does this automatically). If everything went right, you can now type ls in your terminal window and should see git-completion.bash there between other files. Linux Users Follow the steps documented here to install on Linux from the terminal. Danger To install system software using apt-get , you need Super User rights. So please add sudo in front of each apt-get command in the document above, like so: sudo apt-get install git Windows Users Download and install the latest versions of msysgit After installing these programs use Windows Explorer to go to a folder that contains some documents (any folder) and right click on it. You should see some additional items - \"GitBash\" appear in the context menu upon right-clicking. Windows PATH Setting Redux We also want Git from the command line, so we again need to update our PATH settings. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System settings\". Choose \"Environment Variables\" and select Path from the list of system variables. Choose Edit . On Windows 7 or 8 machines: If you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, modifying the following string, copy and paste the following string without spaces at the start or end: ;C:\\Program Files\\Git\\bin On Windows 10 machines: Click New and paste the following string: C:\\Program Files\\Git\\bin Click on OK as often as needed. Verifying your install To verify your installation, type the following command in a terminal and press the return key: git --version You should get an output that looks like: git version 2.18.0 Ensure that you have a version greater than 2.15.0 installed.","title":"Git"},{"location":"gitInstall/#installing-git-and-setting-up-accounts","text":"Git is a Version Control System (VCS) that has gained a lot of traction among the programming community. We will want to use version control to keep track of the files we write, and the changes we make to them.","title":"Installing Git and Setting Up Accounts"},{"location":"gitInstall/#account-creation","text":"During the course we will show you how to use GitHub to host some of your work and do code related project management. You will need to set up an account: Please register for a GitHub account","title":"Account Creation"},{"location":"gitInstall/#mac-users","text":"On MacOS, download and install Git from here . If your system says it can't be opened, because it is from an unidentified developer, then open it via right-lick and open . Also install the command-line auto-completion script. For this go to this website . You should now see a the text file starting with # bash/zsh completion support for core Git. # # Copyright (C) 2006,2007 Shawn O. Pearce <spearce@spearce.org> # Conceptually based on gitcompletion (http://gitweb.hawaga.org.uk/). # Distributed under the GNU General Public License, version 2.0. save this file as git-completion.bash to your user folder by pressing CMD+s . If you want to know where your user folder is, open a terminal and type pwd . For Uli it is for example under /Users/ubergmann . If you use Safari, make sure to save the file as Page Source and don't append a .txt to its filename (Chrome does this automatically). If everything went right, you can now type ls in your terminal window and should see git-completion.bash there between other files.","title":"Mac Users"},{"location":"gitInstall/#linux-users","text":"Follow the steps documented here to install on Linux from the terminal. Danger To install system software using apt-get , you need Super User rights. So please add sudo in front of each apt-get command in the document above, like so: sudo apt-get install git","title":"Linux Users"},{"location":"gitInstall/#windows-users","text":"Download and install the latest versions of msysgit After installing these programs use Windows Explorer to go to a folder that contains some documents (any folder) and right click on it. You should see some additional items - \"GitBash\" appear in the context menu upon right-clicking. Windows PATH Setting Redux We also want Git from the command line, so we again need to update our PATH settings. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System settings\". Choose \"Environment Variables\" and select Path from the list of system variables. Choose Edit . On Windows 7 or 8 machines: If you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, modifying the following string, copy and paste the following string without spaces at the start or end: ;C:\\Program Files\\Git\\bin On Windows 10 machines: Click New and paste the following string: C:\\Program Files\\Git\\bin Click on OK as often as needed.","title":"Windows Users"},{"location":"gitInstall/#verifying-your-install","text":"To verify your installation, type the following command in a terminal and press the return key: git --version You should get an output that looks like: git version 2.18.0 Ensure that you have a version greater than 2.15.0 installed.","title":"Verifying your install"},{"location":"python/","text":"Installing Anaconda Python Anaconda is a pre-packaged Python distribution for scientific users. Direct your browser to Anaconda download page and download the Python 3.7 Graphical Installer for your machine. Follow the steps provided on the website. During the installation you will be asked whether you want Anaconda Python to be added to your PATH. Click yes! Even if the installation window gives a warning about adding it to your PATH, please still check that box. For Windows Users: When asked if you want single or multiple user installation, choose single user Accept all defaults that are set in the installation window Check the box for adding Anaconda to your PATH In the last step, you are asked if you want Visual Studio, click Yes . For Linux Users: For some users Python was not added to the path. To quickly do this, please open a terminal window, paste echo '$HOME/anaconda3/bin:$PATH' >> ~/.bashrc and press Return . Verifying that the installation was successful To verify that the correct version of Python has been installed and was made available in your PATH settings, close your terminal and open a new terminal interface and enter: python --version followed by hitting the Return key. You should see the following information returned: Windows users: Python 3.7.x :: Anaconda, Inc. Mac & Linux/Ubuntu users: Python 3.7.x :: Anaconda custom (64-bit) Python 2 vs Python 3 Python 2 and 3 are incompatible in syntax. If you had Python 2 previously installed on your machine, you might have seen Python 2.x.x above. In that case try typing python3 --version instead. Now you should see a message like the one above and are good to go for the course.","title":"Python"},{"location":"python/#installing-anaconda-python","text":"Anaconda is a pre-packaged Python distribution for scientific users. Direct your browser to Anaconda download page and download the Python 3.7 Graphical Installer for your machine. Follow the steps provided on the website. During the installation you will be asked whether you want Anaconda Python to be added to your PATH. Click yes! Even if the installation window gives a warning about adding it to your PATH, please still check that box. For Windows Users: When asked if you want single or multiple user installation, choose single user Accept all defaults that are set in the installation window Check the box for adding Anaconda to your PATH In the last step, you are asked if you want Visual Studio, click Yes . For Linux Users: For some users Python was not added to the path. To quickly do this, please open a terminal window, paste echo '$HOME/anaconda3/bin:$PATH' >> ~/.bashrc and press Return .","title":"Installing Anaconda Python"},{"location":"python/#verifying-that-the-installation-was-successful","text":"To verify that the correct version of Python has been installed and was made available in your PATH settings, close your terminal and open a new terminal interface and enter: python --version followed by hitting the Return key. You should see the following information returned:","title":"Verifying that the installation was successful"},{"location":"python/#windows-users","text":"Python 3.7.x :: Anaconda, Inc.","title":"Windows users:"},{"location":"python/#mac-linuxubuntu-users","text":"Python 3.7.x :: Anaconda custom (64-bit) Python 2 vs Python 3 Python 2 and 3 are incompatible in syntax. If you had Python 2 previously installed on your machine, you might have seen Python 2.x.x above. In that case try typing python3 --version instead. Now you should see a message like the one above and are good to go for the course.","title":"Mac &amp; Linux/Ubuntu users:"},{"location":"r/","text":"R and RStudio R is a language for statistical computing and graphics. R's use in the data science and econometrics community has taken off over recent years and (at a bare minimum) should be considered as an open source replacement to Stata. Installing R Go to the R homepage and download the installer for your operating system. The current version is R version 3.5.1. Installing RStudio RStudio provides an easy to work with interface to R, and its format should feel familiar to Stata and Matlab users. Download and install the free version of RStudio for your operating system from here . Verifying your Install of R Open a terminal and enter: R --version followed by pressing Return . The expected return begins with: R version 3.x.x (201x-xx-xx) -- \"Some Funky Name\" You should see the version corresponding to the one chosen on the website. Windows PATH Setting redux If you want R available from the command line (it is by default for Mac and Linux), we again need to update our PATH settings. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System settings\". Choose \"Environment Variables\" and select Path from the list of system variables. Choose Edit . Windows 7 and 8 machines: If you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, copy and paste the following string without spaces at the start or end: ;C:\\Program Files\\R\\R-3.5.1\\bin Windows 10 machines: Click New and paste the following string: C:\\Program Files\\R\\R-3.5.1\\bin Click on OK as often as needed. After you have done this, open a new terminal and try and verify your install. Installing Additional R Packages We will need some additional libraries to conduct our statistical analysis. A complete list of R packages will be provided before the course begins.","title":"R"},{"location":"r/#r-and-rstudio","text":"R is a language for statistical computing and graphics. R's use in the data science and econometrics community has taken off over recent years and (at a bare minimum) should be considered as an open source replacement to Stata.","title":"R and RStudio"},{"location":"r/#installing-r","text":"Go to the R homepage and download the installer for your operating system. The current version is R version 3.5.1.","title":"Installing R"},{"location":"r/#installing-rstudio","text":"RStudio provides an easy to work with interface to R, and its format should feel familiar to Stata and Matlab users. Download and install the free version of RStudio for your operating system from here .","title":"Installing RStudio"},{"location":"r/#verifying-your-install-of-r","text":"Open a terminal and enter: R --version followed by pressing Return . The expected return begins with: R version 3.x.x (201x-xx-xx) -- \"Some Funky Name\" You should see the version corresponding to the one chosen on the website. Windows PATH Setting redux If you want R available from the command line (it is by default for Mac and Linux), we again need to update our PATH settings. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System settings\". Choose \"Environment Variables\" and select Path from the list of system variables. Choose Edit . Windows 7 and 8 machines: If you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, copy and paste the following string without spaces at the start or end: ;C:\\Program Files\\R\\R-3.5.1\\bin Windows 10 machines: Click New and paste the following string: C:\\Program Files\\R\\R-3.5.1\\bin Click on OK as often as needed. After you have done this, open a new terminal and try and verify your install.","title":"Verifying your Install of R"},{"location":"r/#installing-additional-r-packages","text":"We will need some additional libraries to conduct our statistical analysis. A complete list of R packages will be provided before the course begins.","title":"Installing Additional R Packages"},{"location":"snakemake/","text":"Snakemake Snakemake is an easy to use workflow management system. It will allow us to control the execution of a set scripts by by running them from the command line. We will use make to automate the execution of our research projects with a \"single click\" so that our entire work flow is reproducible. Snakemake is a Python package - so you will need Python installed on your computer. We recommend installing Python from Anaconda. Mac & Linux Users: In a terminal window enter the command: pip install snakemake followed by pressing the Return key. Verify that your installation worked correctly by entering snakemake --version into a terminal and pressing Return. The expected output is the current version on the software, which should be greater than 5.2.2 Windows users We need one extra step here. In a cygwin window enter the command: conda install datrie followed by pressing Return . If you get an access denied error, you may have not clicked on single user install in the Anaconda installation. De- and re-install Anaconda and try again. If the above command works, your terminal will look something like this: The following NEW packages will be INSTALLED: datrie: 0.7.1 proceed ([y]/n) Type y and hit enter. Once this is done, type: pip install snakemake followed by pressing the Return key. The expected output is the current version on the software, which should be greater than 5.2.2","title":"Build Tools"},{"location":"snakemake/#snakemake","text":"Snakemake is an easy to use workflow management system. It will allow us to control the execution of a set scripts by by running them from the command line. We will use make to automate the execution of our research projects with a \"single click\" so that our entire work flow is reproducible. Snakemake is a Python package - so you will need Python installed on your computer. We recommend installing Python from Anaconda.","title":"Snakemake"},{"location":"snakemake/#mac-linux-users","text":"In a terminal window enter the command: pip install snakemake followed by pressing the Return key. Verify that your installation worked correctly by entering snakemake --version into a terminal and pressing Return. The expected output is the current version on the software, which should be greater than 5.2.2","title":"Mac &amp; Linux Users:"},{"location":"snakemake/#windows-users","text":"We need one extra step here. In a cygwin window enter the command: conda install datrie followed by pressing Return . If you get an access denied error, you may have not clicked on single user install in the Anaconda installation. De- and re-install Anaconda and try again. If the above command works, your terminal will look something like this: The following NEW packages will be INSTALLED: datrie: 0.7.1 proceed ([y]/n) Type y and hit enter. Once this is done, type: pip install snakemake followed by pressing the Return key. The expected output is the current version on the software, which should be greater than 5.2.2","title":"Windows users"},{"location":"textEditor/","text":"Text Editors A good text editor lies at the heart of any serious programmer's toolkit: It can do almost anything and makes you much more productive. The editors built into each program are generally are not an option (we will find certain cases where you may want to use them). Please download, install it along with the necessary packages and stick with it for at least the duration of the course and assignment to get a feel for how it works. There is a slight learning curve, but soon you hopefully be wondering why no-one forced you to do this before! We should get you past the steepest part of the learning curve during the course itself, so we don't anticipate you struggling on your own. Note None of the skills we learn in the course are tied to Atom, so if you do decide to move away to another editor, nothing will be lost. Installing Atom Mac and Windows Users Go to the downloads page and download the live installer for your operating system. Windows users download AtomSetup-x64.exe and execiute the installer Mac users download Atom-Mac.zip and copy the contained Atom.app into the applications folder Linux/Ubuntu users Enter the following information to add a repository that has the Atom installation, then press Return : sudo add-apt-repository ppa:webupd8team/atom Install Atom by entering the following commands into a terminal and then pressing Return: sudo apt update; sudo apt install atom Verifying Atom Installation We want Atom to be available from the command line. For Mac and Linux Users this is the default after you have started the program once. So please open Atom. Then open your terminal and type the following into the command line: atom --version followed by pressing Return you should see output like the following Atom : 1.28.2 Electron: 2.0.5 Chrome : 61.0.3163.100 Node : 8.9.3 Make sure that the version numbers are above 1.26.x or newer. Additional Step for Windows: Getting things to run from the command line for us is a bit harder. You will need local administration rights for your computer, but you should have these on your personal computers or those owned by the Department. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System Settings\". Choose \"Environment Variables\" and select Path from the list of system variables. If you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, choose Edit. On Windows 7 or 8 machines: Append the following (i.e., do not overwrite the previous value) modifying the string, with your relevant username : ;C:\\Users\\username\\AppData\\Local\\atom\\bin to the variable value \u2013 make sure the rest remains as it is and do not include spaces between the \";\" and preceeding text. On Windows 10 machines: Click New and paste the following string, modifying the username C:\\Users\\username\\AppData\\Local\\atom\\bin Click on OK as often as needed. Close your current terminal session, open a new one, and again try atom . - the Atom editor will open if this was successful. Tip You will need to add a new PATH for most of the following installation steps. Always keep in mind that after you add a new PATH, you need to start a new cygwin/terminal session to verify whether it worked. Sometimes it may take a couple of minutes until your PATH is recognized by the terminal. Additional Packages for Atom One of the advantages of Atom is that there are many packages that make your life easier, ranging from simple syntax highlighting to environments that can mimic a complete graphical user interface. For this course, we will install the minimum number of packages necessary to make your coding life easier. Installing Additional Packages for Atom Atom's package manager is built in to the program itself and is relatively easy to interact with. To access Atom's settings press Ctrl + , ( CMD + , on Mac) on your keyboard then click on the Install tab which is visible on the left hand side. On the Installation page there is a prompt where you can type in a package name and then press Return and Atom will search for that package for you and return results with similar names. When you find the package that you need, you click the blue 'Install' button and the package will be installed. For this course, please install the following packages: autocomplete-R autoflow language-r linter tablr platformio-ide-terminal project-plus language-markdown markdown-table-editor markdown-preview-plus autocomplete-citeproc open-unsupported-files advanced-open-file If during the installation of a package Atom asks to install dependencies, always choose to accept. Tip If you decide to stick with Atom after this course, you may find the following packages useful in your day to day work: language-latex language-matlab language-stata atom-latex whitespace Feel free to ask us for whatever other packages we use to make our programming lives easier during some downtime.","title":"Text Editor"},{"location":"textEditor/#text-editors","text":"A good text editor lies at the heart of any serious programmer's toolkit: It can do almost anything and makes you much more productive. The editors built into each program are generally are not an option (we will find certain cases where you may want to use them). Please download, install it along with the necessary packages and stick with it for at least the duration of the course and assignment to get a feel for how it works. There is a slight learning curve, but soon you hopefully be wondering why no-one forced you to do this before! We should get you past the steepest part of the learning curve during the course itself, so we don't anticipate you struggling on your own. Note None of the skills we learn in the course are tied to Atom, so if you do decide to move away to another editor, nothing will be lost.","title":"Text Editors"},{"location":"textEditor/#installing-atom","text":"","title":"Installing Atom"},{"location":"textEditor/#mac-and-windows-users","text":"Go to the downloads page and download the live installer for your operating system. Windows users download AtomSetup-x64.exe and execiute the installer Mac users download Atom-Mac.zip and copy the contained Atom.app into the applications folder","title":"Mac and Windows Users"},{"location":"textEditor/#linuxubuntu-users","text":"Enter the following information to add a repository that has the Atom installation, then press Return : sudo add-apt-repository ppa:webupd8team/atom Install Atom by entering the following commands into a terminal and then pressing Return: sudo apt update; sudo apt install atom","title":"Linux/Ubuntu users"},{"location":"textEditor/#verifying-atom-installation","text":"We want Atom to be available from the command line. For Mac and Linux Users this is the default after you have started the program once. So please open Atom. Then open your terminal and type the following into the command line: atom --version followed by pressing Return you should see output like the following Atom : 1.28.2 Electron: 2.0.5 Chrome : 61.0.3163.100 Node : 8.9.3 Make sure that the version numbers are above 1.26.x or newer. Additional Step for Windows: Getting things to run from the command line for us is a bit harder. You will need local administration rights for your computer, but you should have these on your personal computers or those owned by the Department. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System Settings\". Choose \"Environment Variables\" and select Path from the list of system variables. If you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, choose Edit. On Windows 7 or 8 machines: Append the following (i.e., do not overwrite the previous value) modifying the string, with your relevant username : ;C:\\Users\\username\\AppData\\Local\\atom\\bin to the variable value \u2013 make sure the rest remains as it is and do not include spaces between the \";\" and preceeding text. On Windows 10 machines: Click New and paste the following string, modifying the username C:\\Users\\username\\AppData\\Local\\atom\\bin Click on OK as often as needed. Close your current terminal session, open a new one, and again try atom . - the Atom editor will open if this was successful. Tip You will need to add a new PATH for most of the following installation steps. Always keep in mind that after you add a new PATH, you need to start a new cygwin/terminal session to verify whether it worked. Sometimes it may take a couple of minutes until your PATH is recognized by the terminal.","title":"Verifying Atom Installation"},{"location":"textEditor/#additional-packages-for-atom","text":"One of the advantages of Atom is that there are many packages that make your life easier, ranging from simple syntax highlighting to environments that can mimic a complete graphical user interface. For this course, we will install the minimum number of packages necessary to make your coding life easier.","title":"Additional Packages for Atom"},{"location":"textEditor/#installing-additional-packages-for-atom","text":"Atom's package manager is built in to the program itself and is relatively easy to interact with. To access Atom's settings press Ctrl + , ( CMD + , on Mac) on your keyboard then click on the Install tab which is visible on the left hand side. On the Installation page there is a prompt where you can type in a package name and then press Return and Atom will search for that package for you and return results with similar names. When you find the package that you need, you click the blue 'Install' button and the package will be installed. For this course, please install the following packages: autocomplete-R autoflow language-r linter tablr platformio-ide-terminal project-plus language-markdown markdown-table-editor markdown-preview-plus autocomplete-citeproc open-unsupported-files advanced-open-file If during the installation of a package Atom asks to install dependencies, always choose to accept. Tip If you decide to stick with Atom after this course, you may find the following packages useful in your day to day work: language-latex language-matlab language-stata atom-latex whitespace Feel free to ask us for whatever other packages we use to make our programming lives easier during some downtime.","title":"Installing Additional Packages for Atom"}]}